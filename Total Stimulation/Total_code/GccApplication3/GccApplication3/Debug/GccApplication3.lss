
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000001e6  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800094  00800094  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081c  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006df  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e4  00000000  00000000  00001277  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  0000165c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f5  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  00001b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  8a:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:
#define wheel 15.71
#include "USART_RS232_H_file.h"

int TimerOverflow=0;
ISR(TIMER1_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	TimerOverflow++;
  a0:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
  a4:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__data_end+0x1>
  ae:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:
int main(void) {

	char Data_in;
	DDRB = 0xff;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	87 bb       	out	0x17, r24	; 23
	USART_Init(9600);
  c4:	60 e8       	ldi	r22, 0x80	; 128
  c6:	75 e2       	ldi	r23, 0x25	; 37
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 83 00 	call	0x106	; 0x106 <USART_Init>

	while(1) {
		Data_in = USART_RxChar();
  d0:	0e 94 b1 00 	call	0x162	; 0x162 <USART_RxChar>
  d4:	c8 2f       	mov	r28, r24
		label1:
		USART_SendString("To Start the machine, press 1.");
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 b9 00 	call	0x172	; 0x172 <USART_SendString>
		if (Data_in == '1')
  de:	c1 33       	cpi	r28, 0x31	; 49
  e0:	69 f4       	brne	.+26     	; 0xfc <main+0x3c>
		{
			long count;
			double distance;
			DDRA = 0x01;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	8a bb       	out	0x1a, r24	; 26
			PORTD = 0xFF;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	82 bb       	out	0x12, r24	; 18
			sei();
  ea:	78 94       	sei
			TIMSK = (1<<TOIE1);
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	89 bf       	out	0x39, r24	; 57
			TCCR1A = 0;
  f0:	1f bc       	out	0x2f, r1	; 47
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	8a e1       	ldi	r24, 0x1A	; 26
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x34>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x3a>
  fa:	fb cf       	rjmp	.-10     	; 0xf2 <main+0x32>
					_delay_ms(1000);
					j++;
				}
			}
		}else
		USART_SendString("Select Proper Option");
  fc:	8f e7       	ldi	r24, 0x7F	; 127
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 b9 00 	call	0x172	; 0x172 <USART_SendString>
		goto label1;
 104:	e8 cf       	rjmp	.-48     	; 0xd6 <main+0x16>

00000106 <USART_Init>:

#include "USART_RS232_H_file.h"						/* Include USART header file */

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{ 
	UCSRB |= (1 << RXEN) | (1 << TXEN);				/* Enable USART transmitter and receiver */
 106:	2a b1       	in	r18, 0x0a	; 10
 108:	28 61       	ori	r18, 0x18	; 24
 10a:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */ 
 10c:	20 b5       	in	r18, 0x20	; 32
 10e:	26 68       	ori	r18, 0x86	; 134
 110:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
 112:	dc 01       	movw	r26, r24
 114:	cb 01       	movw	r24, r22
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	aa 1f       	adc	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	aa 1f       	adc	r26, r26
 124:	bb 1f       	adc	r27, r27
 126:	9c 01       	movw	r18, r24
 128:	ad 01       	movw	r20, r26
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	44 1f       	adc	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	44 1f       	adc	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	72 e1       	ldi	r23, 0x12	; 18
 13e:	8a e7       	ldi	r24, 0x7A	; 122
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 cf 00 	call	0x19e	; 0x19e <__udivmodsi4>
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	82 0f       	add	r24, r18
 14a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
 14c:	da 01       	movw	r26, r20
 14e:	c9 01       	movw	r24, r18
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	a1 09       	sbc	r26, r1
 154:	b1 09       	sbc	r27, r1
 156:	89 2f       	mov	r24, r25
 158:	9a 2f       	mov	r25, r26
 15a:	ab 2f       	mov	r26, r27
 15c:	bb 27       	eor	r27, r27
 15e:	80 bd       	out	0x20, r24	; 32
 160:	08 95       	ret

00000162 <USART_RxChar>:
}

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
 162:	5f 9b       	sbis	0x0b, 7	; 11
 164:	fe cf       	rjmp	.-4      	; 0x162 <USART_RxChar>
	return(UDR);									/* Get and return received data */ 
 166:	8c b1       	in	r24, 0x0c	; 12
}
 168:	08 95       	ret

0000016a <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
 16a:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
 16c:	5d 9b       	sbis	0x0b, 5	; 11
 16e:	fe cf       	rjmp	.-4      	; 0x16c <USART_TxChar+0x2>
}
 170:	08 95       	ret

00000172 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	8c 01       	movw	r16, r24
	int i=0;																	
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i]!=0)
 180:	03 c0       	rjmp	.+6      	; 0x188 <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
 182:	0e 94 b5 00 	call	0x16a	; 0x16a <USART_TxChar>
		i++;
 186:	21 96       	adiw	r28, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
 188:	f8 01       	movw	r30, r16
 18a:	ec 0f       	add	r30, r28
 18c:	fd 1f       	adc	r31, r29
 18e:	80 81       	ld	r24, Z
 190:	81 11       	cpse	r24, r1
 192:	f7 cf       	rjmp	.-18     	; 0x182 <USART_SendString+0x10>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <__udivmodsi4>:
 19e:	a1 e2       	ldi	r26, 0x21	; 33
 1a0:	1a 2e       	mov	r1, r26
 1a2:	aa 1b       	sub	r26, r26
 1a4:	bb 1b       	sub	r27, r27
 1a6:	fd 01       	movw	r30, r26
 1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <__udivmodsi4_ep>

000001aa <__udivmodsi4_loop>:
 1aa:	aa 1f       	adc	r26, r26
 1ac:	bb 1f       	adc	r27, r27
 1ae:	ee 1f       	adc	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	a2 17       	cp	r26, r18
 1b4:	b3 07       	cpc	r27, r19
 1b6:	e4 07       	cpc	r30, r20
 1b8:	f5 07       	cpc	r31, r21
 1ba:	20 f0       	brcs	.+8      	; 0x1c4 <__udivmodsi4_ep>
 1bc:	a2 1b       	sub	r26, r18
 1be:	b3 0b       	sbc	r27, r19
 1c0:	e4 0b       	sbc	r30, r20
 1c2:	f5 0b       	sbc	r31, r21

000001c4 <__udivmodsi4_ep>:
 1c4:	66 1f       	adc	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	88 1f       	adc	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	1a 94       	dec	r1
 1ce:	69 f7       	brne	.-38     	; 0x1aa <__udivmodsi4_loop>
 1d0:	60 95       	com	r22
 1d2:	70 95       	com	r23
 1d4:	80 95       	com	r24
 1d6:	90 95       	com	r25
 1d8:	9b 01       	movw	r18, r22
 1da:	ac 01       	movw	r20, r24
 1dc:	bd 01       	movw	r22, r26
 1de:	cf 01       	movw	r24, r30
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
