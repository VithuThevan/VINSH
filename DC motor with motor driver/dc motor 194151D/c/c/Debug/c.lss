
c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c6  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058d  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000294  00000000  00000000  00000e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000161  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
    DDRC = 0XFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	TCCR0 = 0b01110101;
  70:	85 e7       	ldi	r24, 0x75	; 117
  72:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1<<PB3);
  74:	bb 9a       	sbi	0x17, 3	; 23
	OCR0 = 250;
  76:	8a ef       	ldi	r24, 0xFA	; 250
  78:	8c bf       	out	0x3c, r24	; 60
	TCNT0 = 0;
  7a:	12 be       	out	0x32, r1	; 50
  7c:	85 e0       	ldi	r24, 0x05	; 5
  7e:	90 e0       	ldi	r25, 0x00	; 0
	float t =800;
    while (j<5) 
    {
		PORTC = 0X00;
		_delay_ms(t);
		PORTC = 0X06;
  80:	36 e0       	ldi	r19, 0x06	; 6
		_delay_ms(t);
		PORTC = 0X00;
		_delay_ms(t);
		PORTC = 0X05;
  82:	25 e0       	ldi	r18, 0x05	; 5
	TCNT0 = 0;
	int j=0;
	float t =800;
    while (j<5) 
    {
		PORTC = 0X00;
  84:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	4f ef       	ldi	r20, 0xFF	; 255
  88:	5f e0       	ldi	r21, 0x0F	; 15
  8a:	67 e2       	ldi	r22, 0x27	; 39
  8c:	41 50       	subi	r20, 0x01	; 1
  8e:	50 40       	sbci	r21, 0x00	; 0
  90:	60 40       	sbci	r22, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
		_delay_ms(t);
		PORTC = 0X06;
  98:	35 bb       	out	0x15, r19	; 21
  9a:	4f ef       	ldi	r20, 0xFF	; 255
  9c:	5f e0       	ldi	r21, 0x0F	; 15
  9e:	67 e2       	ldi	r22, 0x27	; 39
  a0:	41 50       	subi	r20, 0x01	; 1
  a2:	50 40       	sbci	r21, 0x00	; 0
  a4:	60 40       	sbci	r22, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x34>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x3e>
  aa:	00 00       	nop
		_delay_ms(t);
		PORTC = 0X00;
  ac:	15 ba       	out	0x15, r1	; 21
  ae:	4f ef       	ldi	r20, 0xFF	; 255
  b0:	5f e0       	ldi	r21, 0x0F	; 15
  b2:	67 e2       	ldi	r22, 0x27	; 39
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	50 40       	sbci	r21, 0x00	; 0
  b8:	60 40       	sbci	r22, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x48>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x52>
  be:	00 00       	nop
		_delay_ms(t);
		PORTC = 0X05;
  c0:	25 bb       	out	0x15, r18	; 21
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	5f e0       	ldi	r21, 0x0F	; 15
  c6:	67 e2       	ldi	r22, 0x27	; 39
  c8:	41 50       	subi	r20, 0x01	; 1
  ca:	50 40       	sbci	r21, 0x00	; 0
  cc:	60 40       	sbci	r22, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x5c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x66>
  d2:	00 00       	nop
  d4:	01 97       	sbiw	r24, 0x01	; 1
	DDRB |= (1<<PB3);
	OCR0 = 250;
	TCNT0 = 0;
	int j=0;
	float t =800;
    while (j<5) 
  d6:	b1 f6       	brne	.-84     	; 0x84 <main+0x18>
		_delay_ms(t);
		PORTC = 0X05;
		_delay_ms(t);
		j++;
    }
}
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	08 95       	ret

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
