
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000756  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056d  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000325  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  000014dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>		/* Include Delay header file */

int main(void)
{
	
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	81 bb       	out	0x11, r24	; 17
	TCNT1 = 0;	/* Set timer1 count zero */
  72:	1d bc       	out	0x2d, r1	; 45
  74:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;	/* Set TOP count for timer1 in ICR1 register */
  76:	83 ec       	ldi	r24, 0xC3	; 195
  78:	99 e0       	ldi	r25, 0x09	; 9
  7a:	97 bd       	out	0x27, r25	; 39
  7c:	86 bd       	out	0x26, r24	; 38
	
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
  7e:	82 e8       	ldi	r24, 0x82	; 130
  80:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
  82:	8b e1       	ldi	r24, 0x1B	; 27
  84:	8e bd       	out	0x2e, r24	; 46
	//TCCR2 = (1<<COM21)|(1<<CS22)|(1<<WGM21)|(1<<WGM20);
	
	//initial position
	OCR1A = 140;	/* Set servo shaft at -90° position */
  86:	4c e8       	ldi	r20, 0x8C	; 140
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	5b bd       	out	0x2b, r21	; 43
  8c:	4a bd       	out	0x2a, r20	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	31 e1       	ldi	r19, 0x11	; 17
  92:	6a e7       	ldi	r22, 0x7A	; 122
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	60 40       	sbci	r22, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
	_delay_ms(5000);
	//cleaning the middle part
	OCR1A = 187.5;	/* Set servo shaft at 0° position */
  a0:	8b eb       	ldi	r24, 0xBB	; 187
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	9b bd       	out	0x2b, r25	; 43
  a6:	8a bd       	out	0x2a, r24	; 42
  a8:	7f ef       	ldi	r23, 0xFF	; 255
  aa:	e1 e1       	ldi	r30, 0x11	; 17
  ac:	2a e7       	ldi	r18, 0x7A	; 122
  ae:	71 50       	subi	r23, 0x01	; 1
  b0:	e0 40       	sbci	r30, 0x00	; 0
  b2:	20 40       	sbci	r18, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
	_delay_ms(5000);
	OCR1A = 234;	/* Set servo at +90° position */
  ba:	2a ee       	ldi	r18, 0xEA	; 234
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	3b bd       	out	0x2b, r19	; 43
  c0:	2a bd       	out	0x2a, r18	; 42
  c2:	6f ef       	ldi	r22, 0xFF	; 255
  c4:	71 e1       	ldi	r23, 0x11	; 17
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	61 50       	subi	r22, 0x01	; 1
  ca:	70 40       	sbci	r23, 0x00	; 0
  cc:	e0 40       	sbci	r30, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x5c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x66>
  d2:	00 00       	nop
	_delay_ms(5000);
	OCR1A = 187.5;	/* Set servo shaft at 0° position */
  d4:	9b bd       	out	0x2b, r25	; 43
  d6:	8a bd       	out	0x2a, r24	; 42
  d8:	6f ef       	ldi	r22, 0xFF	; 255
  da:	71 e1       	ldi	r23, 0x11	; 17
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	61 50       	subi	r22, 0x01	; 1
  e0:	70 40       	sbci	r23, 0x00	; 0
  e2:	e0 40       	sbci	r30, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x72>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x7c>
  e8:	00 00       	nop
	_delay_ms(5000);
	OCR1A = 140;	/* Set servo shaft at -90° position */
  ea:	5b bd       	out	0x2b, r21	; 43
  ec:	4a bd       	out	0x2a, r20	; 42
  ee:	4f ef       	ldi	r20, 0xFF	; 255
  f0:	51 e1       	ldi	r21, 0x11	; 17
  f2:	6a e7       	ldi	r22, 0x7A	; 122
  f4:	41 50       	subi	r20, 0x01	; 1
  f6:	50 40       	sbci	r21, 0x00	; 0
  f8:	60 40       	sbci	r22, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x88>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x92>
  fe:	00 00       	nop
	_delay_ms(5000);
	OCR1A = 187.5;	/* Set servo shaft at 0° position */
 100:	9b bd       	out	0x2b, r25	; 43
 102:	8a bd       	out	0x2a, r24	; 42
 104:	7f ef       	ldi	r23, 0xFF	; 255
 106:	81 e1       	ldi	r24, 0x11	; 17
 108:	9a e7       	ldi	r25, 0x7A	; 122
 10a:	71 50       	subi	r23, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x9e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0xa8>
 114:	00 00       	nop
	_delay_ms(5000);
	OCR1A = 234;	/* Set servo at +90° position */
 116:	3b bd       	out	0x2b, r19	; 43
 118:	2a bd       	out	0x2a, r18	; 42
 11a:	ef ef       	ldi	r30, 0xFF	; 255
 11c:	21 e1       	ldi	r18, 0x11	; 17
 11e:	3a e7       	ldi	r19, 0x7A	; 122
 120:	e1 50       	subi	r30, 0x01	; 1
 122:	20 40       	sbci	r18, 0x00	; 0
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0xb4>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0xbe>
 12a:	00 00       	nop
	_delay_ms(5000);
	
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
